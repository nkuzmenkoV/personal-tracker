{"ast":null,"code":"var _jsxFileName = \"/Users/nkuzmenko/zalupa/personal-tracker/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Hardcoded user for admin (you should use a more secure method in production)\nconst adminUser = {\n  username: 'admin',\n  password: '123' // In a real app, this should be hashed\n};\n\n// In a real app, this would be stored in a database\nconst registeredUsers = JSON.parse(localStorage.getItem('registeredUsers')) || [];\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check if user is logged in from localStorage\n    const user = localStorage.getItem('currentUser');\n    if (user) {\n      setCurrentUser(JSON.parse(user));\n    }\n    setLoading(false);\n  }, []);\n  const login = (username, password) => {\n    // Check if username and password match admin credentials\n    if (username === adminUser.username && password === adminUser.password) {\n      const user = {\n        username\n      };\n      setCurrentUser(user);\n      localStorage.setItem('currentUser', JSON.stringify(user));\n      return true;\n    }\n\n    // Check registered users\n    const userMatch = registeredUsers.find(user => user.username === username && user.password === password);\n    if (userMatch) {\n      const user = {\n        username\n      };\n      setCurrentUser(user);\n      localStorage.setItem('currentUser', JSON.stringify(user));\n      return true;\n    }\n    return false;\n  };\n  const register = (username, password, confirmPassword) => {\n    // Validate inputs\n    if (!username || !password || !confirmPassword) {\n      return {\n        success: false,\n        error: 'allFieldsRequired'\n      };\n    }\n    if (password !== confirmPassword) {\n      return {\n        success: false,\n        error: 'passwordsMismatch'\n      };\n    }\n\n    // Check if username already exists\n    if (username === adminUser.username || registeredUsers.some(user => user.username === username)) {\n      return {\n        success: false,\n        error: 'usernameTaken'\n      };\n    }\n\n    // Add new user\n    const newUser = {\n      username,\n      password\n    };\n    const updatedUsers = [...registeredUsers, newUser];\n\n    // Save to localStorage\n    localStorage.setItem('registeredUsers', JSON.stringify(updatedUsers));\n\n    // Update local state\n    registeredUsers.push(newUser);\n    return {\n      success: true\n    };\n  };\n  const logout = () => {\n    setCurrentUser(null);\n    localStorage.removeItem('currentUser');\n  };\n  const value = {\n    currentUser,\n    login,\n    register,\n    logout,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n_s(AuthProvider, \"+Bt7EujFHjK6mRV3YX1iAtSqXvQ=\");\n_c = AuthProvider;\nexport function useAuth() {\n  _s2();\n  return useContext(AuthContext);\n}\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","AuthContext","adminUser","username","password","registeredUsers","JSON","parse","localStorage","getItem","AuthProvider","children","_s","currentUser","setCurrentUser","loading","setLoading","user","login","setItem","stringify","userMatch","find","register","confirmPassword","success","error","some","newUser","updatedUsers","push","logout","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["/Users/nkuzmenko/zalupa/personal-tracker/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\n\nconst AuthContext = createContext();\n\n// Hardcoded user for admin (you should use a more secure method in production)\nconst adminUser = {\n  username: 'admin',\n  password: '123', // In a real app, this should be hashed\n};\n\n// In a real app, this would be stored in a database\nconst registeredUsers = JSON.parse(localStorage.getItem('registeredUsers')) || [];\n\nexport function AuthProvider({ children }) {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Check if user is logged in from localStorage\n    const user = localStorage.getItem('currentUser');\n    if (user) {\n      setCurrentUser(JSON.parse(user));\n    }\n    setLoading(false);\n  }, []);\n\n  const login = (username, password) => {\n    // Check if username and password match admin credentials\n    if (username === adminUser.username && password === adminUser.password) {\n      const user = { username };\n      setCurrentUser(user);\n      localStorage.setItem('currentUser', JSON.stringify(user));\n      return true;\n    }\n    \n    // Check registered users\n    const userMatch = registeredUsers.find(\n      user => user.username === username && user.password === password\n    );\n    \n    if (userMatch) {\n      const user = { username };\n      setCurrentUser(user);\n      localStorage.setItem('currentUser', JSON.stringify(user));\n      return true;\n    }\n    \n    return false;\n  };\n\n  const register = (username, password, confirmPassword) => {\n    // Validate inputs\n    if (!username || !password || !confirmPassword) {\n      return { success: false, error: 'allFieldsRequired' };\n    }\n    \n    if (password !== confirmPassword) {\n      return { success: false, error: 'passwordsMismatch' };\n    }\n    \n    // Check if username already exists\n    if (username === adminUser.username || \n        registeredUsers.some(user => user.username === username)) {\n      return { success: false, error: 'usernameTaken' };\n    }\n    \n    // Add new user\n    const newUser = { username, password };\n    const updatedUsers = [...registeredUsers, newUser];\n    \n    // Save to localStorage\n    localStorage.setItem('registeredUsers', JSON.stringify(updatedUsers));\n    \n    // Update local state\n    registeredUsers.push(newUser);\n    \n    return { success: true };\n  };\n\n  const logout = () => {\n    setCurrentUser(null);\n    localStorage.removeItem('currentUser');\n  };\n\n  const value = {\n    currentUser,\n    login,\n    register,\n    logout,\n    loading\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  return useContext(AuthContext);\n}"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;;AAEnC;AACA,MAAMO,SAAS,GAAG;EAChBC,QAAQ,EAAE,OAAO;EACjBC,QAAQ,EAAE,KAAK,CAAE;AACnB,CAAC;;AAED;AACA,MAAMC,eAAe,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,CAAC,IAAI,EAAE;AAEjF,OAAO,SAASC,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACzC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACmB,OAAO,EAAEC,UAAU,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EAE5CE,SAAS,CAAC,MAAM;IACd;IACA,MAAMmB,IAAI,GAAGT,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IAChD,IAAIQ,IAAI,EAAE;MACRH,cAAc,CAACR,IAAI,CAACC,KAAK,CAACU,IAAI,CAAC,CAAC;IAClC;IACAD,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,KAAK,GAAGA,CAACf,QAAQ,EAAEC,QAAQ,KAAK;IACpC;IACA,IAAID,QAAQ,KAAKD,SAAS,CAACC,QAAQ,IAAIC,QAAQ,KAAKF,SAAS,CAACE,QAAQ,EAAE;MACtE,MAAMa,IAAI,GAAG;QAAEd;MAAS,CAAC;MACzBW,cAAc,CAACG,IAAI,CAAC;MACpBT,YAAY,CAACW,OAAO,CAAC,aAAa,EAAEb,IAAI,CAACc,SAAS,CAACH,IAAI,CAAC,CAAC;MACzD,OAAO,IAAI;IACb;;IAEA;IACA,MAAMI,SAAS,GAAGhB,eAAe,CAACiB,IAAI,CACpCL,IAAI,IAAIA,IAAI,CAACd,QAAQ,KAAKA,QAAQ,IAAIc,IAAI,CAACb,QAAQ,KAAKA,QAC1D,CAAC;IAED,IAAIiB,SAAS,EAAE;MACb,MAAMJ,IAAI,GAAG;QAAEd;MAAS,CAAC;MACzBW,cAAc,CAACG,IAAI,CAAC;MACpBT,YAAY,CAACW,OAAO,CAAC,aAAa,EAAEb,IAAI,CAACc,SAAS,CAACH,IAAI,CAAC,CAAC;MACzD,OAAO,IAAI;IACb;IAEA,OAAO,KAAK;EACd,CAAC;EAED,MAAMM,QAAQ,GAAGA,CAACpB,QAAQ,EAAEC,QAAQ,EAAEoB,eAAe,KAAK;IACxD;IACA,IAAI,CAACrB,QAAQ,IAAI,CAACC,QAAQ,IAAI,CAACoB,eAAe,EAAE;MAC9C,OAAO;QAAEC,OAAO,EAAE,KAAK;QAAEC,KAAK,EAAE;MAAoB,CAAC;IACvD;IAEA,IAAItB,QAAQ,KAAKoB,eAAe,EAAE;MAChC,OAAO;QAAEC,OAAO,EAAE,KAAK;QAAEC,KAAK,EAAE;MAAoB,CAAC;IACvD;;IAEA;IACA,IAAIvB,QAAQ,KAAKD,SAAS,CAACC,QAAQ,IAC/BE,eAAe,CAACsB,IAAI,CAACV,IAAI,IAAIA,IAAI,CAACd,QAAQ,KAAKA,QAAQ,CAAC,EAAE;MAC5D,OAAO;QAAEsB,OAAO,EAAE,KAAK;QAAEC,KAAK,EAAE;MAAgB,CAAC;IACnD;;IAEA;IACA,MAAME,OAAO,GAAG;MAAEzB,QAAQ;MAAEC;IAAS,CAAC;IACtC,MAAMyB,YAAY,GAAG,CAAC,GAAGxB,eAAe,EAAEuB,OAAO,CAAC;;IAElD;IACApB,YAAY,CAACW,OAAO,CAAC,iBAAiB,EAAEb,IAAI,CAACc,SAAS,CAACS,YAAY,CAAC,CAAC;;IAErE;IACAxB,eAAe,CAACyB,IAAI,CAACF,OAAO,CAAC;IAE7B,OAAO;MAAEH,OAAO,EAAE;IAAK,CAAC;EAC1B,CAAC;EAED,MAAMM,MAAM,GAAGA,CAAA,KAAM;IACnBjB,cAAc,CAAC,IAAI,CAAC;IACpBN,YAAY,CAACwB,UAAU,CAAC,aAAa,CAAC;EACxC,CAAC;EAED,MAAMC,KAAK,GAAG;IACZpB,WAAW;IACXK,KAAK;IACLK,QAAQ;IACRQ,MAAM;IACNhB;EACF,CAAC;EAED,oBACEf,OAAA,CAACC,WAAW,CAACiC,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAtB,QAAA,EAChC,CAACI,OAAO,IAAIJ;EAAQ;IAAAwB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAE3B;AAAC1B,EAAA,CApFeF,YAAY;AAAA6B,EAAA,GAAZ7B,YAAY;AAsF5B,OAAO,SAAS8B,OAAOA,CAAA,EAAG;EAAAC,GAAA;EACxB,OAAO5C,UAAU,CAACI,WAAW,CAAC;AAChC;AAACwC,GAAA,CAFeD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}